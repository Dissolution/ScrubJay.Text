###################################################################################################
# 
# Last Updated: 2025-01-17
#
# Helpful Links
# https://editorconfig.org/
# https://spec.editorconfig.org/
# https://editorconfig.guide/
# https://github.com/dimitrietataru/csharp-coding-standards
# https://learn.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options
# 	https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview
#	https://learn.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers
#	https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/categories
# https://www.jetbrains.com/help/rider/Using_EditorConfig.html
#	https://www.jetbrains.com/help/rider/EditorConfig_Index.html
#
# Inspired By
# https://github.com/dotnet/roslyn/blob/main/.editorconfig
# https://github.com/Microsoft/vscode/blob/main/.editorconfig
# https://github.com/autofac/Autofac/blob/develop/.editorconfig
# https://github.com/dotnet/corefx/blob/master/.editorconfig
###################################################################################################


# This is the top-most EditorConfig file
root = true

# Rules that apply to all files of all types
[*]

# use spaces instead of tabs to keep display consistent
indent_style = space
# we develop on Windows
end_of_line = crlf
# in American English
spelling_language = en-US

# clean up whitespace
trim_trailing_whitespace = true
insert_final_newline = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
indent_size = 4
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = false:none
dotnet_style_explicit_tuple_names = true:error
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning
dotnet_style_prefer_collection_expression = when_types_loosely_match:warning
dotnet_style_namespace_match_folder = true:warning


# For other file types, use 2 spaces instead of 4
[*.{csproj,sln,json,xml}]
indent_size = 2

# All C# Code Files
[*.cs]
indent_size = 4
charset = utf-8-bom

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
# But do not separate System.* and other imports
dotnet_separate_import_directive_groups = false



###### NAMING

## Styles - Define naming styles to apply to members

# ALL UPPER CASE
dotnet_naming_style.upper_casing.capitalization = all_upper

# all lower case
dotnet_naming_style.lower_casing.capitalization = all_lower

# PascalCase
dotnet_naming_style.pascal_casing.capitalization = pascal_case

# camelCase
dotnet_naming_style.camel_casing.capitalization = camel_case

# _camelCase
dotnet_naming_style.underscore_camel_casing.capitalization = camel_case
dotnet_naming_style.underscore_camel_casing.required_prefix = _

# IPascalCase
dotnet_naming_style.i_pascal_casing.capitalization = pascal_case
dotnet_naming_style.i_pascal_casing.required_prefix = I

# TPascalCase
dotnet_naming_style.t_pascal_casing.capitalization = pascal_case
dotnet_naming_style.t_pascal_casing.required_prefix = T

# PascalCaseAsync
dotnet_naming_style.pascal_casing_async.capitalization = pascal_case
dotnet_naming_style.pascal_casing_async.required_suffix = Async


## Symbols
# Define which symbols the naming rules apply to

# All Non-Public Fields
dotnet_naming_symbols.non_public_fields.applicable_kinds = field
dotnet_naming_symbols.non_public_fields.applicable_accessibilities = internal, private, protected, proected_internal, private_protected, local
# Public Fields
dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public

# Public Members except Interfaces
dotnet_naming_symbols.public_members.applicable_kinds = class, struct, enum, property, method, event, delegate

# Interfaces
dotnet_naming_symbols.interfaces.applicable_kinds = interface

# Localized Members
dotnet_naming_symbols.local_members.applicable_kinds = parameter, local, local_function

# Generic Type Parameters
dotnet_naming_symbols.generic_types.applicable_kinds = type_parameter

# Constants
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

# Async Methods
dotnet_naming_symbols.async_methods.applicable_kinds = method
dotnet_naming_symbols.async_methods.required_modifiers = async



## Rules
# Determine the scope and severity

# Non-Public Fields should be _camelCase, always
dotnet_naming_rule.non_public_fields_should_be_underscore_camel_case.style = underscore_camel_casing
dotnet_naming_rule.non_public_fields_should_be_underscore_camel_case.symbols = non_public_fields
dotnet_naming_rule.non_public_fields_should_be_underscore_camel_case.severity = error

# Public Fields should be PascalCase, always
dotnet_naming_rule.public_fields_should_be_pascal_case.style = pascal_casing
dotnet_naming_rule.public_fields_should_be_pascal_case.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascal_case.severity = error

# Public Members (except for interfaces) should be PascalCase, always
dotnet_naming_rule.public_members_should_be_pascal_case.style = pascal_casing
dotnet_naming_rule.public_members_should_be_pascal_case.symbols = public_members
dotnet_naming_rule.public_members_should_be_pascal_case.severity = error

# Interfaces should be IPascalCase, always
dotnet_naming_rule.interfaces_should_be_i_pascal_case.style = i_pascal_casing
dotnet_naming_rule.interfaces_should_be_i_pascal_case.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_i_pascal_case.severity = error

# Localized Members should be camelCase, always
dotnet_naming_rule.local_members_should_be_camel_case.style = camel_casing
dotnet_naming_rule.local_members_should_be_camel_case.symbols = local_members
dotnet_naming_rule.local_members_should_be_camel_case.severity = error

# Generic Type Parameters should be TPascalCase, usually
dotnet_naming_rule.generic_types_should_be_t_pascal_case.style = t_pascal_casing
dotnet_naming_rule.generic_types_should_be_t_pascal_case.symbols = generic_types
dotnet_naming_rule.generic_types_should_be_t_pascal_case.severity = error

# Constants should be PascalCase, usually
dotnet_naming_rule.constants_should_be_all_upper.style = pascal_casing
dotnet_naming_rule.constants_should_be_all_upper.symbols = constants
dotnet_naming_rule.constants_should_be_all_upper.severity = error

# Async Methods should end with *Async, always
dotnet_naming_rule.async_methods_should_end_with_async.style = pascal_casing_async
dotnet_naming_rule.async_methods_should_end_with_async.symbols = async_methods
dotnet_naming_rule.async_methods_should_end_with_async.severity = error



###### Code Styles

### C# formatting options
### https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options

# New-line options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

# Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrap options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Experimental Styling
dotnet_style_allow_multiple_blank_lines_experimental = false
csharp_style_allow_embedded_statements_on_same_line_experimental = false
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
dotnet_style_allow_statement_immediately_after_block_experimental = false
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false

### Additional Code Style Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
# These require specifying the IDE#### directly

# Simplify name (IDE0001)
# This also hits on unneeded generic parameter types
dotnet_diagnostic.IDE0001.severity = none
# Simplify member access (IDE0002)
dotnet_diagnostic.IDE0002.severity = error
# Remove unnecessary cast (IDE0004)
dotnet_diagnostic.IDE0002.severity = suggestion
# Remove unnecessary using directives (IDE0005)
dotnet_diagnostic.IDE0005.severity = error
# Add missing cases to switch statement (IDE0010)
dotnet_diagnostic.IDE0010.severity = error
# Remove unreachable code (IDE0035)
dotnet_diagnostic.IDE0035.severity = error
# Convert anonymous type to tuple (IDE0050)
dotnet_diagnostic.IDE0050.severity = error
# Remove unused private member (IDE0051)
dotnet_diagnostic.IDE0051.severity = error
# Remove unread private member (IDE0052)
dotnet_diagnostic.IDE0052.severity = error
# Make struct fields writable (IDE0064)
dotnet_diagnostic.IDE0064.severity = error
# Use 'System.HashCode.Combine' (IDE0070)
dotnet_diagnostic.IDE0070.severity = error
# Add missing cases to switch expression (IDE0072)
dotnet_diagnostic.IDE0072.severity = error
# Remove invalid global 'SuppressMessageAttribute' (IDE0076)
dotnet_diagnostic.IDE0076.severity = error
# Avoid legacy format target in global 'SuppressMessageAttribute' (IDE0077)
dotnet_diagnostic.IDE0077.severity = error
# Remove unnecessary suppression operator (IDE0080)
dotnet_diagnostic.IDE0080.severity = warning
# Remove ByVal (IDE0081)
dotnet_diagnostic.IDE0081.severity = error
# Convert typeof to nameof (IDE0082)
dotnet_diagnostic.IDE0082.severity = error
# Remove unnecessary equality operator (IDE0100)
dotnet_diagnostic.IDE0100.severity = error
# Remove unnecessary discard (IDE0110)
dotnet_diagnostic.IDE0110.severity = error
# Simplify LINQ expression (IDE0120)
dotnet_diagnostic.IDE0120.severity = warning
# Nullable directive is redundant (IDE0240)
dotnet_diagnostic.IDE0240.severity = error
# Nullable directive is unnecessary (IDE0241)
dotnet_diagnostic.IDE0241.severity = error
# Use 'nameof' (IDE0280)
dotnet_diagnostic.IDE0280.severity = error


###### Diagnostic Severities
# We want to eventually turn these all to error
dotnet_diagnostic.CS0168.severity = warning
dotnet_diagnostic.CS8632.severity = warning
dotnet_diagnostic.CS8600.severity = warning
dotnet_diagnostic.CS8604.severity = warning


###### Language Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules
# These rules are listed in IDE#### order

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007-ide0008
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:none

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0011
csharp_prefer_braces = when_multiline:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0016
csharp_style_throw_expression = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0017
dotnet_style_object_initializer = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0018
csharp_style_inlined_variable_declaration = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0019
csharp_style_pattern_matching_over_as_with_null_check = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0020-ide0038
csharp_style_pattern_matching_over_is_with_cast_check = true:warning

## Expression Bodied Members
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0021
csharp_style_expression_bodied_constructors = false:warning
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0022
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0023-ide0024
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0025
csharp_style_expression_bodied_properties = when_on_single_line:warning
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0026
csharp_style_expression_bodied_indexers = when_on_single_line:warning
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0027
csharp_style_expression_bodied_accessors = when_on_single_line:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0028
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_collection_expression = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0029-ide0030-ide0270
dotnet_style_coalesce_expression = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0031
dotnet_style_null_propagation = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0032
# I use direct fields for performance reasons
dotnet_style_prefer_auto_properties = true:none

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0033
dotnet_style_explicit_tuple_names = true:error

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0034
csharp_prefer_simple_default_expression = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0036
csharp_preferred_modifier_order = public, private, protected, internal, file, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, required, volatile, async

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0037
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0039
csharp_style_prefer_local_over_anonymous_function = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0040
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0041
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0042
csharp_style_deconstructed_variable_declaration = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0044
dotnet_style_readonly_field = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0045
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0046
dotnet_style_prefer_conditional_expression_over_return = false:none

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = always_for_clarity:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0053
csharp_style_expression_bodied_lambdas = when_on_single_line:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0054-ide0074
dotnet_style_prefer_compound_assignment = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0056
csharp_style_prefer_index_operator = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0057
csharp_style_prefer_range_operator = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0058
csharp_style_unused_value_expression_statement_preference = discard_variable:none

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0059
csharp_style_unused_value_assignment_preference = discard_variable:none

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0060
dotnet_code_quality_unused_parameters = all:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0061
csharp_style_expression_bodied_local_functions = when_on_single_line:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0062
csharp_prefer_static_local_function = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0063
csharp_prefer_simple_using_statement = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0065
csharp_using_directive_placement = outside_namespace:error

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0066
csharp_style_prefer_switch_expression = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0071
dotnet_style_prefer_simplified_interpolation = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0075
dotnet_style_prefer_simplified_boolean_expressions = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0078-ide0260
csharp_style_prefer_pattern_matching = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0079
# This triggers a lot of false positives
dotnet_remove_unnecessary_suppression_exclusions = none
dotnet_diagnostic.IDE0079.severity = none

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0083
csharp_style_prefer_not_pattern = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0090
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0130
dotnet_style_namespace_match_folder = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0150
csharp_style_prefer_null_check_over_type_check = true:error

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0160-ide0161
csharp_style_namespace_declarations = file_scoped:error

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0170
csharp_style_prefer_extended_property_pattern = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0180
csharp_style_prefer_tuple_swap = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0200
csharp_style_prefer_method_group_conversion = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0210
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0211
csharp_style_prefer_top_level_statements = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0220
dotnet_style_prefer_foreach_explicit_cast_in_source = always:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0230
csharp_style_prefer_utf8_string_literals = true:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0250
csharp_style_prefer_readonly_struct = true:error

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0251
csharp_style_prefer_readonly_struct_member = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0290
csharp_style_prefer_primary_constructors = false:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0300
dotnet_style_prefer_collection_expression = when_types_loosely_match:warning

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0301
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0302
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0303
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0304
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0305
dotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0320
csharp_prefer_static_anonymous_function = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0330
csharp_prefer_system_threading_lock = true:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide1005
csharp_style_conditional_delegate_call = true:warning



###### Design Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/design-warnings

# CA1000: Do not declare static members on generic types
# I understand this rule and know what I'm doing
dotnet_diagnostic.CA1000.severity = none

# CA1001: Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = warning

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = none

# CA1003: Use generic event handler instances
dotnet_diagnostic.CA1003.severity = error

# CA1005: Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = suggestion

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = error

# CA1010: Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = error

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = error

# CA1014: Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1014.severity = none

# CA1016: Mark assemblies with AssemblyVersionAttribute
dotnet_diagnostic.CA1016.severity = none

# CA1017: Mark assemblies with ComVisibleAttribute
dotnet_diagnostic.CA1017.severity = none

# CA1018: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = error

# CA1019: Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = error

# CA1021: Avoid out parameters
dotnet_diagnostic.CA1021.severity = none

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = suggestion

# CA1027: Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = error

# CA1028: Enum storage should be Int32
dotnet_diagnostic.CA1028.severity = warning

# CA1030: Use events where appropriate
dotnet_diagnostic.CA1030.severity = error

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = suggestion

# CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = warning

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = suggestion

# CA1034: Nested types should not be visible
dotnet_diagnostic.CA1034.severity = warning

# CA1036: Override methods on comparable types
dotnet_diagnostic.CA1036.severity = warning

# CA1040: Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = warning

# CA1041: Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = error

# CA1043: Use integral or string argument for indexers
dotnet_diagnostic.CA1043.severity = warning

# CA1044: Properties should not be write only
dotnet_diagnostic.CA1044.severity = none

# CA1045: Do not pass types by reference
dotnet_diagnostic.CA1045.severity = warning

# CA1046: Do not overload operator equals on reference types
dotnet_diagnostic.CA1046.severity = warning

# CA1047: Do not declare protected members in sealed types
dotnet_diagnostic.CA1047.severity = error

# CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = error

# CA1051: Do not declare visible instance fields
# I use these for performance reasons
dotnet_diagnostic.CA1051.severity = none

# CA1052: Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = warning

# CA1053: Static holder types should not have default constructors
dotnet_diagnostic.CA1053.severity = warning

# CA1054: URI parameters should not be strings
dotnet_diagnostic.CA1054.severity = warning
# CA1055: URI return values should not be strings
dotnet_diagnostic.CA1055.severity = warning
# CA1056: URI properties should not be strings
dotnet_diagnostic.CA1056.severity = warning

# CA1058: Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = error

# CA1060: Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1060.severity = error

# CA1061: Do not hide base class methods
dotnet_diagnostic.CA1061.severity = error

# CA1062: Validate arguments of public methods
# I'm using nullability extensively
dotnet_diagnostic.CA1062.severity = none

# CA1063: Implement IDisposable correctly
dotnet_diagnostic.CA1063.severity = suggestion

# CA1064: Exceptions should be public
dotnet_diagnostic.CA1064.severity = error

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = error

# CA1066: Implement IEquatable when overriding Equals
dotnet_diagnostic.CA1066.severity = error
# CA1067: Override Equals when implementing IEquatable
dotnet_diagnostic.CA1067.severity = error

# CA1068: CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = error

# CA1069: Enums should not have duplicate values
dotnet_diagnostic.CA1069.severity = error

# CA1070: Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = error


###### Documentation Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/documentation-warnings

# CA1200: Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = error


###### Globalization Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/globalization-warnings

# CA1303: Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = none
# CA1304: Specify CultureInfo
dotnet_diagnostic.CA1304.severity = none
# CA1305: Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = none
# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = suggestion
# CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = warning
# CA1309: Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = suggestion
# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = suggestion
# CA1311: Specify a culture or use an invariant version
dotnet_diagnostic.CA1311.severity = none
# CA2101: Specify marshalling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = none


###### Portability and Interoperability Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/interoperability-warnings

# CA1401: P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = error
# CA1416: Validate platform compatibility
dotnet_diagnostic.CA1416.severity = error
# CA1417: Do not use OutAttribute on string parameters for P/Invokes
dotnet_diagnostic.CA1417.severity = error
# CA1418: Validate platform compatibility
dotnet_diagnostic.CA1418.severity = error
# CA1419: Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1419.severity = error
# CA1420: Property, type, or attribute requires runtime marshalling
dotnet_diagnostic.CA1420.severity = error
# CA1421: Method uses runtime marshalling when DisableRuntimeMarshallingAttribute is applied
dotnet_diagnostic.CA1421.severity = error
# CA1422: Validate platform compatibility - obsoleted APIs
dotnet_diagnostic.CA1422.severity = error


###### Maintainability Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/maintainability-warnings

# CA1501: Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning
# CA1502: Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = warning
# CA1505: Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning
# CA1506: Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = warning
# CA1507: Use nameof in place of string
dotnet_diagnostic.CA1507.severity = error
# CA1508: Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = error
# CA1510: Use ArgumentNullException throw helper
dotnet_diagnostic.CA1510.severity = error
# CA1511: Use ArgumentException throw helper
dotnet_diagnostic.CA1511.severity = error
# CA1512: Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = error
# CA1513: Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1513.severity = error
# CA1514: Avoid redundant length argument
dotnet_diagnostic.CA1514.severity = warning
# CA1515: Consider making public types internal
dotnet_diagnostic.CA1515.severity = suggestion


###### Naming Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/naming-warnings

# CA1700: Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = error
# CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = none
# CA1708: Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = error
# CA1710: Identifiers should have correct suffix
# !!! This may need to be a warning
dotnet_diagnostic.CA1708.severity = error
# CA1711: Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = error
# CA1712: Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = error
# CA1713: Events should not have before or after prefix
dotnet_diagnostic.CA1713.severity = error
# CA1714: Flags enums should have plural names
# !!! This may need to be a warning
dotnet_diagnostic.CA1714.severity = error
# CA1715: Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = error
# CA1716: Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = error

# CA1717: Only FlagsAttribute enums should have plural names
# !!! This may need to be a warning
dotnet_diagnostic.CA1717.severity = error
# CA1720: Identifiers should not contain type names
dotnet_diagnostic.CA1720.severity = error
# CA1721: Property names should not match get methods
dotnet_diagnostic.CA1721.severity = error
# CA1724: Type names should not match namespaces
# !!! This may need to be a warning
dotnet_diagnostic.CA1724.severity = error
# CA1725: Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = none
# CA1727: Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = error


###### Performance Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/performance-warnings

# CA1802: Use Literals Where Appropriate
dotnet_diagnostic.CA1802.severity = error
# CA1805: Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = warning
# CA1806: Do not ignore method results
# !!! This may have to be a warning
dotnet_diagnostic.CA1806.severity = error
# CA1810: Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = warning
# CA1812: Avoid uninstantiated internal classes
# !!! Has issues with DI, we may need to disable this rule
dotnet_diagnostic.CA1812.severity = warning
# CA1813: Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = error
# CA1814: Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = none
# CA1815: Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = warning
# CA1819: Properties should not return arrays
# !!! This should be a warning or error
dotnet_diagnostic.CA1819.severity = suggestion
# CA1820: Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = error
# CA1821: Remove empty finalizers
dotnet_diagnostic.CA1821.severity = error
# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = warning
# CA1823: Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning
# CA1824: Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = none
# CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = error
# CA1826: Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1826.severity = error
# CA1827: Do not use Count()/LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = error
# CA1828: Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1828.severity = error
# CA1829: Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1829.severity = error
# CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = error
# CA1831: Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1831.severity = error
# CA1832: Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1832.severity = error
# CA1833: Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1833.severity = error
# CA1834: Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = error
# CA1835: Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1835.severity = error
# CA1836: Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1836.severity = error
# CA1837: Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1837.severity = error
# CA1838: Avoid StringBuilder parameters for P/Invokes
dotnet_diagnostic.CA1838.severity = error
# CA1839: Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1839.severity = error
# CA1840: Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1840.severity = error
# CA1841: Prefer Dictionary Contains methods
dotnet_diagnostic.CA1841.severity = error
# CA1842: Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = error
# CA1843: Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = error
# CA1844: Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1844.severity = error
# CA1845: Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = error
# CA1846: Prefer AsSpan over Substring
dotnet_diagnostic.CA1846.severity = error
# CA1847: Use String.Contains(char) instead of String.Contains(string) with single characters
dotnet_diagnostic.CA1847.severity = error
# CA1848: Use the LoggerMessage delegates
# !!! Discuss?
dotnet_diagnostic.CA1848.severity = warning
# CA1849: Call async methods when in an async method
dotnet_diagnostic.CA1849.severity = error
# CA1850: Prefer static HashData method over ComputeHash
dotnet_diagnostic.CA1850.severity = error
# CA1851: Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1851.severity = error
# CA1852: Seal internal types
dotnet_diagnostic.CA1852.severity = error
# CA1853: Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1853.severity = error
# CA1854: Prefer the IDictionary.TryGetValue(TKey, out TValue) method
dotnet_diagnostic.CA1854.severity = error
# CA1855: Use Span<T>.Clear() instead of Span<T>.Fill()
dotnet_diagnostic.CA1855.severity = error
# CA1856: Incorrect usage of ConstantExpected attribute
dotnet_diagnostic.CA1856.severity = error
# CA1857: The parameter expects a constant for optimal performance
dotnet_diagnostic.CA1857.severity = error
# CA1858: Use StartsWith instead of IndexOf
dotnet_diagnostic.CA1858.severity = error
# CA1859: Use concrete types when possible for improved performance
dotnet_diagnostic.CA1859.severity = error
# CA1860: Avoid using 'Enumerable.Any()' extension method
dotnet_diagnostic.CA1860.severity = error
# CA1861: Avoid constant arrays as arguments
dotnet_diagnostic.CA1861.severity = error
# CA1862: Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
# !!! This should be an error
dotnet_diagnostic.CA1862.severity = warning
# CA1863: Use 'CompositeFormat'
dotnet_diagnostic.CA1863.severity = error
# CA1864: Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
dotnet_diagnostic.CA1864.severity = error
# CA1865-CA1867: Use 'string.Method(char)' instead of 'string.Method(string)' for string with single char
dotnet_diagnostic.CA1865.severity = error
dotnet_diagnostic.CA1866.severity = error
dotnet_diagnostic.CA1867.severity = error
# CA1868: Unnecessary call to 'Contains' for sets
dotnet_diagnostic.CA1868.severity = error
# CA1869: Cache and reuse 'JsonSerializerOptions' instances
dotnet_diagnostic.CA1869.severity = error
# CA1870: Use a cached 'SearchValues' instance
dotnet_diagnostic.CA1870.severity = error
# CA1871: Do not pass a nullable struct to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA1871.severity = error
# CA1872: Prefer 'Convert.ToHexString' and 'Convert.ToHexStringLower' over call chains based on 'BitConverter.ToString'
dotnet_diagnostic.CA1872.severity = error


###### SingleFile Rules
# https://learn.microsoft.com/en-us/dotnet/core/deploying/single-file/warnings/overview


###### Reliability Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/reliability-warnings

# CA2000: Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = error
dotnet_code_quality.CA2000.excluded_symbol_names = System.Diagnostics.Process|AmazonSQSClient


# CA2002: Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = error
# CA2007: Do not directly await a Task
# !!! This is fixed in modern .NET (no longer need ConfigureAwait())
dotnet_diagnostic.CA2007.severity = none
# CA2008: Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = error
# CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = error
# CA2011: Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = error
# CA2012: Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = error
# CA2013: Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = error
# CA2014: Do not use stackalloc in loops
dotnet_diagnostic.CA2014.severity = error
# CA2015: Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2015.severity = error
# CA2016: Forward the CancellationToken parameter to methods that take one
# !!! This may need to be a warning
dotnet_diagnostic.CA2016.severity = error
# CA2017: Parameter count mismatch
dotnet_diagnostic.CA2017.severity = error
# CA2018: The count argument to Buffer.BlockCopy should specify the number of bytes to copy
dotnet_diagnostic.CA2018.severity = error
# CA2019: ThreadStatic fields should not use inline initialization
dotnet_diagnostic.CA2019.severity = error
# CA2020: Prevent behavioral change caused by built-in operators of IntPtr/UIntPtr
dotnet_diagnostic.CA2020.severity = error
# CA2021: Don't call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
dotnet_diagnostic.CA2021.severity = error
# CA2022: Avoid inexact read with Stream.Read
dotnet_diagnostic.CA2022.severity = error


###### Security Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/security-warnings

# CA2100: Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = error
# CA2109: Review visible event handlers
# dotnet_diagnostic.CA2109.severity = error
# CA2119: Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = error
# CA2153: Avoid handling Corrupted State Exceptions
dotnet_diagnostic.CA2153.severity = error

# CA2300: Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = error
# CA2301: Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = error
# CA2302: Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = error
# CA2305: Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2305.severity = error
# CA2310: Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2310.severity = error
# CA2311: Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2311.severity = error
# CA2312: Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2312.severity = error

# CA2315: Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2315.severity = error
# CA2321: Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2321.severity = error
# CA2322: Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2322.severity = error
# CA2326: Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2326.severity = error
# CA2327: Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2327.severity = error
# CA2328: Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2328.severity = error
# CA2329: Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2329.severity = error
# CA2330: Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2330.severity = error

# CA2350: Ensure DataTable.ReadXml()'s input is trusted
dotnet_diagnostic.CA2350.severity = error
# CA2351: Ensure DataSet.ReadXml()'s input is trusted
dotnet_diagnostic.CA2351.severity = error
# CA2352: Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2352.severity = error
# CA2353: Unsafe DataSet or DataTable in serializable type
dotnet_diagnostic.CA2353.severity = error
# CA2354: Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attack
dotnet_diagnostic.CA2354.severity = error
# CA2355: Unsafe DataSet or DataTable in deserialized object graph
dotnet_diagnostic.CA2355.severity = error
# CA2356: Unsafe DataSet or DataTable type in web deserialized object graph
dotnet_diagnostic.CA2356.severity = error
# CA2361: Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data
dotnet_diagnostic.CA2361.severity = error
# CA2362: Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2362.severity = error

# CA3001: Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = error
# CA3002: Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = error
# CA3003: Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = error
# CA3004: Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = error
# CA3005: Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = error
# CA3006: Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = error
# CA3007: Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = error
# CA3008: Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = error
# CA3009: Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = error
# CA3010: Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = error
# CA3011: Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = error
# CA3012: Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = error

# CA3061: Do not add schema by URL
dotnet_diagnostic.CA3061.severity = error
# CA3075: Insecure DTD Processing
dotnet_diagnostic.CA3075.severity = error
# CA3076: Insecure XSLT Script Execution
dotnet_diagnostic.CA3076.severity = error
# CA3077: Insecure Processing in API Design, XML Document and XML Text Reader
dotnet_diagnostic.CA3077.severity = error
# CA3147: Mark verb handlers with ValidateAntiForgeryToken
dotnet_diagnostic.CA3147.severity = error
# CA5350: Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5350.severity = error
# CA5351 Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = error
# CA5358: Do Not Use Unsafe Cipher Modes
dotnet_diagnostic.CA5358.severity = error
# CA5359: Do not disable certificate validation
dotnet_diagnostic.CA5359.severity = error
# CA5360: Do not call dangerous methods in deserialization
dotnet_diagnostic.CA5360.severity = error
# CA5361: Do not disable SChannel use of strong crypto
dotnet_diagnostic.CA5361.severity = error
# CA5362: Potential reference cycle in deserialized object graph
dotnet_diagnostic.CA5362.severity = error
# CA5363: Do not disable request validation
dotnet_diagnostic.CA5363.severity = error
# CA5364: Do not use deprecated security protocols
dotnet_diagnostic.CA5364.severity = error
# CA5365: Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5365.severity = error
# CA5366: Use XmlReader For DataSet Read XML
dotnet_diagnostic.CA5366.severity = error
# CA5367: Do not serialize types with pointer fields
dotnet_diagnostic.CA5367.severity = error
# CA5368: Set ViewStateUserKey For Classes Derived From Page
dotnet_diagnostic.CA5368.severity = error
# CA5369: Use XmlReader for Deserialize
dotnet_diagnostic.CA5369.severity = error
# CA5370: Use XmlReader for validating reader
dotnet_diagnostic.CA5370.severity = error
# CA5371: Use XmlReader for schema read
dotnet_diagnostic.CA5371.severity = error
# CA5372: Use XmlReader for XPathDocument
dotnet_diagnostic.CA5372.severity = error
# CA5373: Do not use obsolete key derivation function
dotnet_diagnostic.CA5373.severity = error
# CA5374: Do not use XslTransform
dotnet_diagnostic.CA5374.severity = error
# CA5375: Do not use account shared access signature
dotnet_diagnostic.CA5375.severity = error
# CA5376: Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5376.severity = error
# CA5377: Use container level access policy
dotnet_diagnostic.CA5377.severity = error
# CA5378: Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5378.severity = error
# CA5379: Ensure key derivation function algorithm is sufficiently strong
dotnet_diagnostic.CA5379.severity = error
# CA5380: Do not add certificates to root store
dotnet_diagnostic.CA5380.severity = error
# CA5381: Ensure certificates are not added to root store
dotnet_diagnostic.CA5381.severity = error
# CA5382: Use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5382.severity = error
# CA5383: Ensure use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5383.severity = error
# CA5384: Do not use digital signature algorithm (DSA)
dotnet_diagnostic.CA5384.severity = error
# CA5385: Use Rivest–Shamir–Adleman (RSA) algorithm with sufficient key size
dotnet_diagnostic.CA5385.severity = error
# CA5386: Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = error
# CA5387: Do not use weak key derivation function with insufficient iteration count
dotnet_diagnostic.CA5387.severity = error
# CA5388: Ensure sufficient iteration count when using weak key derivation function
dotnet_diagnostic.CA5388.severity = error
# CA5389: Do not add archive item's path to the target file system path
dotnet_diagnostic.CA5389.severity = error
# CA5390: Do not hard-code encryption key
dotnet_diagnostic.CA5390.severity = error
# CA5391: Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5391.severity = error
# CA5392: Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5392.severity = error
# CA5393: Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5393.severity = error
# CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = none
# CA5395: Miss HttpVerb attribute for action methods
dotnet_diagnostic.CA5395.severity = error
# CA5396: Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5396.severity = error
# CA5397: Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5397.severity = error
# CA5398: Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5398.severity = error
# CA5399: Enable HttpClient certificate revocation list check
dotnet_diagnostic.CA5399.severity = error
# CA5400: Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5400.severity = error
# CA5401: Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5401.severity = error
# CA5402: Use CreateEncryptor with the default IV
dotnet_diagnostic.CA5402.severity = error
# CA5403: Do not hard-code certificate
dotnet_diagnostic.CA5403.severity = error
# CA5404: Do not disable token validation checks
dotnet_diagnostic.CA5404.severity = error
# CA5405: Do not always skip token validation in delegates
dotnet_diagnostic.CA5405.severity = error


###### Usage Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/usage-warnings

# CA1801: Review unused parameters
dotnet_diagnostic.CA1801.severity = error
# CA1816: Call GC.SuppressFinalize correctly
dotnet_diagnostic.CA1816.severity = error
# CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = error
# CA2201: Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = error
# CA2207: Initialize value type static fields inline
# !!! Warning?
dotnet_diagnostic.CA2207.severity = error
# CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = error
# CA2211: Non-constant fields should not be visible
# !!! Discuss -> error?
dotnet_diagnostic.CA2211.severity = warning
# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = error
# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning
# CA2215: Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = error
# CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = error
# CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = error
# CA2218: Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2218.severity = error
# CA2219: Do not raise exceptions in exception clauses
dotnet_diagnostic.CA2219.severity = error
# CA2224: Override Equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = error
# CA2225: Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = none
# CA2226: Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = error
# CA2227: Collection properties should be read only
# !!! Discuss?
dotnet_diagnostic.CA2227.severity = warning
# CA2229: Implement serialization constructors
dotnet_diagnostic.CA2229.severity = none
# CA2231: Overload operator equals on overriding ValueType.Equals
dotnet_diagnostic.CA2231.severity = error
# CA2234: Pass System.Uri objects instead of strings
dotnet_diagnostic.CA2234.severity = error
# CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = error
# CA2237: Mark ISerializable types with SerializableAttribute
dotnet_diagnostic.CA2237.severity = error
# CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = error
# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = error
# CA2243: Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = error
# CA2244: Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = error
# CA2245: Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = error
# CA2246: Do not assign a symbol and its member in the same statement
dotnet_diagnostic.CA2246.severity = error
# CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2247.severity = error
# CA2248: Provide correct enum argument to Enum.HasFlag
dotnet_diagnostic.CA2248.severity = error
# CA2249: Consider using String.Contains instead of String.IndexOf
dotnet_diagnostic.CA2249.severity = error
# CA2250: Use ThrowIfCancellationRequested
dotnet_diagnostic.CA2250.severity = error
# CA2251: Use String.Equals over String.Compare
dotnet_diagnostic.CA2251.severity = error
# CA2252: Opt in to preview features before using them
dotnet_diagnostic.CA2252.severity = error
# CA2253: Named placeholders should not be numeric values
dotnet_diagnostic.CA2253.severity = error
# CA2254: Template should be a static expression
dotnet_diagnostic.CA2254.severity = error
# CA2255: The ModuleInitializer attribute should not be used in libraries
dotnet_diagnostic.CA2255.severity = error
# CA2256: All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2256.severity = error
# CA2257: Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2257.severity = error
# CA2258: Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
dotnet_diagnostic.CA2258.severity = error
# CA2259: Ensure ThreadStatic is only used with static fields
dotnet_diagnostic.CA2259.severity = error
# CA2260: Implement generic math interfaces correctly
dotnet_diagnostic.CA2260.severity = error
# CA2261: Do not use ConfigureAwaitOptions.SuppressThrowing with Task<TResult>
dotnet_diagnostic.CA2261.severity = error
# CA2262: Set 'MaxResponseHeadersLength' properly
dotnet_diagnostic.CA2262.severity = error
# CA2263: Prefer generic overload when type is known
dotnet_diagnostic.CA2263.severity = error
# CA2264: Do not pass a non-nullable value to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA2264.severity = error
# CA2265: Do not compare Span<T> to null or default
dotnet_diagnostic.CA2265.severity = error


###### IDE-Only Rules
# Invalid JSON pattern (JSON001)
dotnet_diagnostic.JSON001.severity = error
# Probable JSON string detected (JSON002)
dotnet_diagnostic.JSON002.severity = error
# Invalid regex pattern (RE0001)
dotnet_diagnostic.RE0001.severity = error


###### ASP.NET Core Rules
# https://learn.microsoft.com/en-us/aspnet/core/diagnostics/code-analysis?view=aspnetcore-9.0

# ASP0000: Do not call 'IServiceCollection.BuildServiceProvider' in 'ConfigureServices'
dotnet_diagnostic.ASP0000.severity = error
# ASP0001: Authorization middleware is incorrectly configured
dotnet_diagnostic.ASP0001.severity = error
# ASP0003: Do not use model binding attributes with route handlers
dotnet_diagnostic.ASP0003.severity = error
# ASP0004: Do not use action results with route handlers
dotnet_diagnostic.ASP0004.severity = error
# ASP0005: Do not place attribute on method called by route handler lambda
dotnet_diagnostic.ASP0005.severity = error
# ASP0006: Do not use non-literal sequence numbers
dotnet_diagnostic.ASP0006.severity = error
# ASP0007: Route parameter and argument optionality is mismatched
dotnet_diagnostic.ASP0007.severity = error
# ASP0008: Do not use ConfigureWebHost with WebApplicationBuilder.Host
dotnet_diagnostic.ASP0008.severity = error
# ASP0009: Do not use Configure with WebApplicationBuilder.WebHost
dotnet_diagnostic.ASP0009.severity = error
# ASP0010: Do not use UseStartup with WebApplicationBuilder.WebHost
dotnet_diagnostic.ASP0010.severity = error
# ASP0011: Suggest using builder.Logging over Host.ConfigureLogging or WebHost.ConfigureLogging
dotnet_diagnostic.ASP0011.severity = error
# ASP0012: Suggest using builder.Services over Host.ConfigureServices or WebHost.ConfigureServices
dotnet_diagnostic.ASP0012.severity = error
# ASP0013: Suggest switching from using Configure methods to WebApplicationBuilder.Configuration
dotnet_diagnostic.ASP0013.severity = error
# ASP0014: Suggest using top level route registrations
dotnet_diagnostic.ASP0014.severity = error
# ASP0015: Suggest using IHeaderDictionary properties
dotnet_diagnostic.ASP0015.severity = error
# ASP0016: Do not return a value from RequestDelegate
dotnet_diagnostic.ASP0016.severity = error
# ASP0017: Invalid route pattern
dotnet_diagnostic.ASP0017.severity = error
# ASP0018: Unused route parameter
dotnet_diagnostic.ASP0018.severity = error
# ASP0019: Suggest using IHeaderDictionary.Append or the indexer
dotnet_diagnostic.ASP0019.severity = error
# ASP0020: Complex types referenced by route parameters must be parsable
dotnet_diagnostic.ASP0020.severity = error
# ASP0021: The return type of the BindAsync method must be ValueTask<T>.
dotnet_diagnostic.ASP0021.severity = error
# ASP0022: Route conflict detected between route handlers
dotnet_diagnostic.ASP0022.severity = error
# ASP0023: Route conflict detected between route handlers
dotnet_diagnostic.ASP0023.severity = error
# ASP0024: Route handler has multiple parameters with the [FromBody] attribute
dotnet_diagnostic.ASP0024.severity = error
# ASP0025: Use AddAuthorizationBuilder to register authorization services and construct policies.
dotnet_diagnostic.ASP0025.severity = error
# ASP0026: [Authorize] is overridden by [AllowAnonymous] from "farther away"
dotnet_diagnostic.ASP0026.severity = error

# BL0001: Component parameter should have public setters
dotnet_diagnostic.BL0001.severity = error
# BL0002: Component has multiple CaptureUnmatchedValues parameters
dotnet_diagnostic.BL0002.severity = error
# BL0003: Component parameter with CaptureUnmatchedValues has the wrong type
dotnet_diagnostic.BL0003.severity = error
# BL0004: Component parameter should be public
dotnet_diagnostic.BL0004.severity = error
# BL0005: Component parameter should not be set outside of its component
dotnet_diagnostic.BL0005.severity = error
# BL0006: Do not use RenderTree types
dotnet_diagnostic.BL0006.severity = error

# MVC1000: Use of IHtmlHelper.Partial should be avoided
dotnet_diagnostic.MVC1000.severity = error
# MVC1001: Filters cannot be applied to page handler methods
dotnet_diagnostic.MVC1001.severity = error
# MVC1002: Route attribute cannot be applied to page handler methods
dotnet_diagnostic.MVC1002.severity = error
# MVC1003: Route attributes cannot be applied to page models
dotnet_diagnostic.MVC1003.severity = error
# MVC1004: Rename model bound parameter
dotnet_diagnostic.MVC1004.severity = error
# MVC1005: Cannot use UseMvc with Endpoint Routing
dotnet_diagnostic.MVC1005.severity = error
# MVC1006: Methods containing TagHelpers must be async and return Task
dotnet_diagnostic.MVC1006.severity = error

# RDG002: Unable to resolve endpoint handler
dotnet_diagnostic.RDG002.severity = error
# RDG004: Unable to resolve anonymous type
dotnet_diagnostic.RDG004.severity = error
# RDG005: Invalid abstract type
dotnet_diagnostic.RDG005.severity = error
# RDG006: Invalid constructor parameters
dotnet_diagnostic.RDG006.severity = error
# RDG007: No valid constructor found
dotnet_diagnostic.RDG007.severity = error
# RDG008: Multiple public constructors
dotnet_diagnostic.RDG008.severity = error
# RDG009: Invalid nested AsParameters
dotnet_diagnostic.RDG009.severity = error
# RDG010: InvalidAsParameters Nullable
dotnet_diagnostic.RDG010.severity = error
# RDG011: Type parameters not supported
dotnet_diagnostic.RDG011.severity = error
# RDG012: Unable to resolve inaccessible type
dotnet_diagnostic.RDG012.severity = error
# RDG013: Invalid source attributes
dotnet_diagnostic.RDG013.severity = error